###############################################################################
# General Options                                                             #
###############################################################################

[general]
# To ensure all execution is deterministic, we keep a random seed that
# is referenced by everything.  We make no guarantees that order of
# operations may change from rev to rev, but one execution to another
# should be deterministic.
random-seed = 0xdeadbeef


###############################################################################
# Test DB - Single Fragment                                                   #
###############################################################################

# db-<name> is the config section to populate a database with sample
# data.  The FakeDB class in the gabby package is designed to use this
# config section to populate databases.  There's an open todo item to
# use a proper decay model rather than specifying the lifetime.
[db-single]

# The most straight-forward method of generating fake data is to just
# specify single satellites.  This one is most useful for verifying
# the overall pathway.  See the build_single method of the FakeDB
# object for further documentation.
single-intldes = 99025
single-A = 650
single-P = 400
single-life = 720
single-start = 2006-12-01 00:00:00
single-decay-alt = 100
single-output = %%(des)s-apt.png

# Another source of fake data is to start with a few parameters like
# apogee and perigee, then use a normal distribution around those
# valuse for a given number of fragments.  Check the build_norm method
# of the FakeDB object for further documentation.
norm-intldes = 99025
norm-A = 650
norm-P = 400
norm-n = 10
norm-dev-frac = .1
norm-life = 720
norm-start = 2006-12-01 00:00:00
norm-decay-alt = 100

