#!/usr/bin/env python

import argparse
import configparser
import datetime
import logging
import matplotlib
import matplotlib.pyplot as plt
import os
import shutil
import sys

import gabby


if __name__ == '__main__':
    desc = """Testing utility.

Right now, it just builds fake DBs.
    """

    formatter = argparse.RawTextHelpFormatter
    parser = argparse.ArgumentParser(description=desc,
                                     formatter_class=formatter)

    parser.add_argument('--full-db-path', '-u',
                        metavar='FULL_DB_PATH',
                        action='store',
                        dest='full_db_path',
                        required=False,
                        type=str,
                        default='output/test_full.db',
                        help='Location of the full lmdb (%(default)s)')

    parser.add_argument('--fragment-db-path', '-a',
                        metavar='FRAGMENT_DB_PATH',
                        action='store',
                        dest='frag_db_path',
                        required=False,
                        type=str,
                        default='output/test_frag.db',
                        help='Location of the fragments lmdb (%(default)s)')

    parser.add_argument('--config-file', '-c',
                        metavar='CONFIG_PATH',
                        action='store',
                        dest='cfg',
                        required=False,
                        type=str,
                        default='cfg/test.cfg',
                        help='Path to the config file (%(default)s)')

    parser.add_argument('--target', '-t',
                        metavar='TARGET',
                        action='store',
                        dest='tgt',
                        required=False,
                        type=str,
                        default='single',
                        help='The config target (%(default)s)')

    parser.add_argument('--num-threads', '-n',
                        metavar='NUM_THREADS',
                        action='store',
                        dest='n_threads',
                        required=False,
                        type=int,
                        default=1,
                        help='The number of threads to use (%(default)s)')

    parser.add_argument('--output-directory', '-o',
                        metavar='OUTPUT_DIR',
                        action='store',
                        dest='output_dir',
                        required=False,
                        type=str,
                        default='output/%(tgt)s',
                        help='Output directory (%(default)s)',)

    parser.add_argument('--log-file', '-l',
                        metavar='LOG_FILE',
                        action='store',
                        dest='log_file',
                        type=str,
                        default='%(output_dir)s/test.log',
                        help='Logfile in output directory (%(default)s)')

    parser.add_argument('--log-level', '-L',
                        metavar='LOG_LEVEL',
                        action='store',
                        dest='log_level',
                        type=str,
                        default='info',
                        choices=['critical',
                                 'error',
                                 'warning',
                                 'info',
                                 'debug'],
                        help='Log level to use (%(default)s)')

    parser.add_argument('cmd',
                        metavar='COMMAND',
                        action='store',
                        type=str,
                        choices=['build',],
                        help='Command to execute')


    args = parser.parse_args()


    arg_dict = {
        'tgt': args.tgt
        }

    # Get our output directory all set up
    output_dir = args.output_dir % arg_dict
    arg_dict['output_dir'] = output_dir

    gabby.mkdir_p(output_dir)

    # Get set up to log
    log_file = args.log_file%arg_dict
    gabby.setup_logging(log_file=log_file,
                        log_level=args.log_level)
    logging.info(f"Giddy up, Gabby!")

    # Load the config file
    logging.info(f"Loading config file: {args.cfg}")
    cfg = configparser.ConfigParser(allow_no_value=True)
    cfg.read(args.cfg)

    # Disable interactive mode in matplotlib to speed up plot
    # generation and save memory
    plt.ioff()
    matplotlib.use('TkAgg')

    full_db_path = args.full_db_path % arg_dict
    frag_db_path = args.frag_db_path % arg_dict

    if args.cmd == 'build':
        tgt = cfg['db-'+args.tgt]

        faker = gabby.FakeDB(cfg, tgt,
                             output_dir=output_dir,
                             full_path=full_db_path,
                             frag_path=frag_db_path)
        faker.build_norm()

    else:
        logging.critical(f"WHAT DID YOU DO??? {args.cmd}")
