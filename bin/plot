#!/usr/bin/env python

import argparse
import configparser
import datetime
import logging
import matplotlib
import matplotlib.pyplot as plt
import os
import shutil
import sys

import gabby


if __name__ == '__main__':
    desc = """Produces the plots that will be used for the animations.
    """

    formatter = argparse.RawTextHelpFormatter
    parser = argparse.ArgumentParser(description=desc,
                                     formatter_class=formatter)

    parser.add_argument('--db-path', '-d',
                        metavar='DB_PATH',
                        action='store',
                        dest='db_path',
                        required=False,
                        type=str,
                        default='tle.db',
                        help='Location of the lmdb (%(default)s)')

    parser.add_argument('--config-file', '-c',
                        metavar='CONFIG_PATH',
                        action='store',
                        dest='cfg',
                        required=False,
                        type=str,
                        default='cfg/asat.cfg',
                        help='Path to the config file (%(default)s)')

    parser.add_argument('--target', '-t',
                        metavar='TARGET',
                        action='store',
                        dest='tgt',
                        required=False,
                        type=str,
                        default='shakti',
                        help='The ASAT to build video for (%(default)s)')

    parser.add_argument('--num-threads', '-n',
                        metavar='NUM_THREADS',
                        action='store',
                        dest='n_threads',
                        required=False,
                        type=int,
                        default=1,
                        help='The number of threads to use (%(default)s)')

    parser.add_argument('--output-directory', '-o',
                        metavar='OUTPUT_DIR',
                        action='store',
                        dest='output_dir',
                        required=False,
                        type=str,
                        default='output/%(tgt)s',
                        help='Output directory (%(default)s)',)

    parser.add_argument('--staging-directory', '-s',
                        metavar='STAGING_DIR',
                        action='store',
                        dest='staging_dir',
                        required=False,
                        type=str,
                        default='staging',
                        help='Staging directory (%(default)s)',)

    parser.add_argument('--clean', '-C',
                        action='store_true',
                        dest='clean',
                        help='Cleans the image directory before plotting',)

    parser.add_argument('--log-file', '-l',
                        metavar='LOG_FILE',
                        action='store',
                        dest='log_file',
                        type=str,
                        default='%(output_dir)s/plot-%(tgt)s.log',
                        help='Logfile in output directory (%(default)s)')

    parser.add_argument('--log-level', '-L',
                        metavar='LOG_LEVEL',
                        action='store',
                        dest='log_level',
                        type=str,
                        default='info',
                        choices=['critical',
                                 'error',
                                 'warning',
                                 'info',
                                 'debug'],
                        help='Log level to use (%(default)s)')

    args = parser.parse_args()


    arg_dict = {
        'tgt': args.tgt
        }

    # Get our output directory all set up
    output_dir = args.output_dir % arg_dict
    arg_dict['output_dir'] = output_dir
    gabby.mkdir_p(output_dir)

    # Get set up to log
    log_file = args.log_file%arg_dict
    gabby.setup_logging(log_file=log_file,
                        log_level=args.log_level)
    logging.info(f"Giddy up, Gabby!")

    # Load the config file
    logging.info(f"Loading config file: {args.cfg}")
    cfg = configparser.ConfigParser(allow_no_value=True)
    cfg.read(args.cfg)

    # Find the target
    tgt = cfg['gabby-'+args.tgt]

    # Disable interactive mode in matplotlib to speed up plot
    # generation and save memory
    plt.ioff()
    matplotlib.use('TkAgg')

    img_dir = os.path.join(output_dir, "img")
    if args.clean and os.path.isdir(img_dir):
        shutil.rmtree(img_dir)

    # Let the conspiracy commence!
    db_path = args.db_path % arg_dict
    plotter = gabby.Conspirator(cfg=cfg['general'],
                                tgt=tgt,
                                output_dir=output_dir,
                                staging_dir=args.staging_dir,
                                db_path=db_path)
    logging.info("The Plotter has arrived!")

    plotter.plot(n_threads=args.n_threads)
