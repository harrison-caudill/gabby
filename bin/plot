#!/usr/bin/env python3

import argparse
import configparser
import datetime
import logging
import matplotlib
import matplotlib.pyplot as plt
import os
import shutil
import sys

import gabby


if __name__ == '__main__':
    desc = """Plots debris data in various fun ways.

 Because this process involves a stupid amount of work, it is set up
 to use python's multiprocessing library under the hood.  Pass in the
 number of independent processes with the -n switch.  I recommend N-1
 where N is the number of independent threads your CPU(s) can run
 (AFTER hyperthreading).

 The config file is where we stash all of the parameters for the plots
 themselves, rather than try to fit everything onto a command line

 * gabby: Animated/static Gabbard plot with number of fragments
 * bstar: Animated/static frequency histograms of B* values


  =============================================================================
  == Gabby Plots                                                             ==
  =============================================================================


  Overall plot structure:
  +---------------------------------------------------------------------------+
  |                                  +                                        |
  |                                +                                          |
  |                              +                                            |
  |                            +                                              |
  |                      + + + + + + +                                        |
  |                          +                                                |
  |                        +                                                  |
  |                      +                                                    |
  +---------------------------------------------------------------------------+

  +---------------------------------------------------------------------------+
  |                                                                           |
  |     -----.                                                                |
  |    /      -                                                               |
  |   |                                                                       |
  |  /                                                                        |
  | |                                                                         |
  | |                                                                         |
  +---------------------------------------------------------------------------+

  Output Files:

  <output_dir>/<profile-name>/gabby_img/0000.png
  <output_dir>/<profile-name>/gabby_img/0001.png
  ...
  <output_dir>/<profile-name>/gabby_img/%*.*d.png % (log10(N), log10(N), N)

  So, it will adjust the number of digits in the name according to the
  number of fragments you have.


  =============================================================================
  == BStar Plots                                                             ==
  =============================================================================

  No, I don't have a fun ascii-art version of this.

    """

    formatter = argparse.RawTextHelpFormatter
    parser = argparse.ArgumentParser(description=desc,
                                     formatter_class=formatter)

    parser.add_argument('--db-path', '-d',
                        metavar='DB_PATH',
                        action='store',
                        dest='db_path',
                        required=False,
                        type=str,
                        default='../tle.db',
                        help='Location of the lmdb (%(default)s)')

    parser.add_argument('--config-file', '-c',
                        metavar='CONFIG_PATH',
                        action='store',
                        dest='cfg',
                        required=False,
                        type=str,
                        default='cfg/asat.cfg',
                        help='Path to the config file (%(default)s)')

    parser.add_argument('--tgt-cache-path',
                        metavar='TGT_CACHE_DIR',
                        action='store',
                        dest='tgt_cache_dir',
                        required=False,
                        type=str,
                        default='%(output_dir)s/%(tgt)s/cache',
                        help='Cache directory (%(default)s)')

    parser.add_argument('--global-cache-path',
                        metavar='GLOBAL_CACHE_DIR',
                        action='store',
                        dest='global_cache_dir',
                        required=False,
                        type=str,
                        default='%(output_dir)s/cache',
                        help='Cache directory (%(default)s)')

    parser.add_argument('--target', '-t',
                        metavar='TARGET',
                        action='store',
                        dest='tgt',
                        required=False,
                        type=str,
                        default='nudol',
                        help='The ASAT to build video for (%(default)s)')

    parser.add_argument('--plot-type', '-T',
                        metavar='PLOT_TYPE',
                        action='store',
                        dest='plot_type',
                        type=str,
                        default='gabby',
                        choices=['gabby',
                                 'bstar',
                                 'num'],
                        help='Which plot type to build (%(default)s)')

    parser.add_argument('--num-threads', '-n',
                        metavar='NUM_THREADS',
                        action='store',
                        dest='n_threads',
                        required=False,
                        type=int,
                        default=1,
                        help='The number of threads to use (%(default)s)')

    parser.add_argument('--output-directory', '-o',
                        metavar='OUTPUT_DIR',
                        action='store',
                        dest='output_dir',
                        required=False,
                        type=str,
                        default='output',
                        help='Output directory (%(default)s)',)

    parser.add_argument('--clean', '-C',
                        action='store_true',
                        dest='clean',
                        help='Cleans the target directory before plotting',)

    parser.add_argument('--log-file', '-l',
                        metavar='LOG_FILE',
                        action='store',
                        dest='log_file',
                        type=str,
                        default='%(output_dir)s/%(tgt)s/plot.log',
                        help='Logfile in output directory (%(default)s)')

    parser.add_argument('--log-level', '-L',
                        metavar='LOG_LEVEL',
                        action='store',
                        dest='log_level',
                        type=str,
                        default='info',
                        choices=['critical',
                                 'error',
                                 'warning',
                                 'info',
                                 'debug'],
                        help='Log level to use (%(default)s)')

    args = parser.parse_args()


    arg_dict = {
        'tgt': args.tgt
        }

    # Get our output directory all set up
    output_dir = args.output_dir % arg_dict
    arg_dict['output_dir'] = output_dir
    img_dir = os.path.join(output_dir, args.tgt, args.plot_type+'-img')
    global_cache_dir = args.global_cache_dir % arg_dict
    tgt_cache_dir = args.tgt_cache_dir % arg_dict
    if args.clean:
        if os.path.isdir(img_dir): shutil.rmtree(img_dir)
        if os.path.isdir(tgt_cache_dir): shutil.rmtree(tgt_cache_dir)
    gabby.mkdir_p(output_dir)
    gabby.mkdir_p(tgt_cache_dir)
    gabby.mkdir_p(global_cache_dir)

    # Get set up to log
    log_file = args.log_file%arg_dict
    gabby.setup_logging(log_file=log_file,
                        log_level=args.log_level)
    logging.info(f"Giddy up, Gabby!")

    # Load the config file
    logging.info(f"Loading config file: {args.cfg}")
    cfg = configparser.ConfigParser(allow_no_value=True)
    cfg.read(args.cfg)

    # Find the target
    tgt = cfg[args.plot_type+'-'+args.tgt]

    # Disable interactive mode in matplotlib to speed up plot
    # generation and save memory
    plt.ioff()
    matplotlib.use('TkAgg')

    # Spin up our global/target caches
    global_cache = gabby.GabbyCache(global_cache_dir)
    tgt_cache = gabby.GabbyCache(tgt_cache_dir)

    # Build the on-disk DB object
    db_path = args.db_path % arg_dict
    db = gabby.GabbyDB(db_path, global_cache=global_cache)

    if args.plot_type == 'gabby':

        cache_name = gabby.GabbyDataModel.cache_name
        if cache_name in tgt_cache:
            logging.info(f"  Found data in the local cache.")
            data = tgt_cache[cache_name]
        else:
            logging.info(f"  No joy in the cache. Building data model")
            data = gabby.GabbyDataModel.from_cfg(tgt, db)
            tgt_cache[cache_name] = data

        if tgt.getboolean('fwd-prop'):
            # Forward propagation is from last observation to decay
            logging.info(f"  Forward propagation requested")

            prop = gabby.StatsPropagator(tgt=tgt,
                                         cfg=cfg,
                                         global_cache=global_cache,
                                         db=db)
            prop.propagate(data, n_threads=args.n_threads)

        plotter = gabby.GabbyPlotter(cfg=cfg['general'],
                                     tgt=tgt,
                                     cache_dir=tgt_cache_dir,
                                     img_dir=img_dir,
                                     output_dir=output_dir,
                                     data=data,
                                     db=db)
        plotter.plot(n_threads=args.n_threads)

    elif args.plot_type == 'num':

        cache_name = gabby.GabbyDataModel.cache_name
        if cache_name in tgt_cache:
            logging.info(f"  Found data in the local cache.")
            data = tgt_cache[cache_name]
        else:
            data = gabby.GabbyDataModel.from_cfg(tgt, db)
            tgt_cache[cache_name] = data

        if tgt.getboolean('fwd-prop'):
            # Forward propagation is from last observation to decay
            logging.info(f"  Forward propagation requested")

            prop = gabby.StatsPropagator.from_config(cfg, db, global_cache)
            after_obs = tgt.getboolean('prop-after-observation')
            prop.propagate(data, gabby.parse_date_d(tgt['incident']),
                           rev=tgt.getboolean('rev-prop'),
                           prop_after_obs=after_obs,
                           n_threads=args.n_threads)

        # Do the Deed!!!
        plotter = gabby.NumberPlotter(cfg=cfg['general'],
                                      tgt=tgt,
                                      cache_dir=tgt_cache_dir,
                                      img_dir=img_dir,
                                      output_dir=output_dir,
                                      data=data,
                                      db=db)
        plotter.plot(n_threads=args.n_threads)

    else:
        logging.critical(f"WHAT DID YOU DO??? {args.plot_type}")
