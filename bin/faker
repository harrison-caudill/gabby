#!/usr/bin/env python

import argparse
import configparser
import datetime
import logging
import matplotlib
import matplotlib.pyplot as plt
import os
import shutil
import sys

import gabby


if __name__ == '__main__':
    desc = """Builds a fake DB.
    """

    formatter = argparse.RawTextHelpFormatter
    parser = argparse.ArgumentParser(description=desc,
                                     formatter_class=formatter)

    parser.add_argument('--db-path', '-d',
                        metavar='DB_PATH',
                        action='store',
                        dest='db_path',
                        required=False,
                        type=str,
                        default='output/faker.db',
                        help='Location of the lmdb (%(default)s)')

    parser.add_argument('--config-file', '-c',
                        metavar='CONFIG_PATH',
                        action='store',
                        dest='cfg',
                        required=False,
                        type=str,
                        default='gabby/test/test.cfg',
                        help='Path to the config file (%(default)s)')

    parser.add_argument('--target', '-t',
                        metavar='TARGET',
                        action='store',
                        dest='tgt',
                        required=False,
                        type=str,
                        default='single-linear',
                        help='The db to build (%(default)s)')

    parser.add_argument('--output-directory', '-o',
                        metavar='OUTPUT_DIR',
                        action='store',
                        dest='output_dir',
                        required=False,
                        type=str,
                        default='output',
                        help='Output directory (%(default)s)',)

    parser.add_argument('--clean', '-C',
                        action='store_true',
                        dest='clean',
                        help='Cleans the target directory before plotting',)

    parser.add_argument('--log-file', '-l',
                        metavar='LOG_FILE',
                        action='store',
                        dest='log_file',
                        type=str,
                        default='%(output_dir)s/%(tgt)s/plot.log',
                        help='Logfile in output directory (%(default)s)')

    parser.add_argument('--log-level', '-L',
                        metavar='LOG_LEVEL',
                        action='store',
                        dest='log_level',
                        type=str,
                        default='info',
                        choices=['critical',
                                 'error',
                                 'warning',
                                 'info',
                                 'debug'],
                        help='Log level to use (%(default)s)')

    args = parser.parse_args()


    arg_dict = {
        'tgt': args.tgt
        }

    # Get our output directory all set up
    output_dir = args.output_dir % arg_dict
    arg_dict['output_dir'] = output_dir
    gabby.mkdir_p(output_dir)

    # Get set up to log
    log_file = args.log_file%arg_dict
    gabby.setup_logging(log_file=log_file,
                        log_level=args.log_level)
    logging.info(f"Giddy up, Gabby!")

    # Load the config file
    logging.info(f"Loading config file: {args.cfg}")
    cfg = configparser.ConfigParser(allow_no_value=True)
    cfg.read(args.cfg)

    # Find the target
    tgt = cfg['db-'+args.tgt]

    # Build the on-disk DB object
    db_path = args.db_path % arg_dict
    faker = gabby.FakeDB(cfg, tgt, db_path=db_path)
    faker.build_linear()
