#!/usr/bin/env python

import argparse
import logging
import os
import sys

import gabby


if __name__ == '__main__':
    desc = """Ingests data from either local disk or the web.
    """

    formatter = argparse.RawTextHelpFormatter
    parser = argparse.ArgumentParser(description=desc,
                                     formatter_class=formatter)

    parser.add_argument('--db-path', '-d',
                        metavar='DB_PATH',
                        action='store',
                        dest='db_path',
                        required=False,
                        type=str,
                        default='%(output_dir)s/tle.db',
                        help='Location of the lmdb (%(default)s)')

    parser.add_argument('--force', '-f',
                        action='store_true',
                        dest='force',
                        help='Re-import even if present (%(default)s)')

    parser.add_argument('--output-directory', '-o',
                        metavar='OUTPUT_DIR',
                        action='store',
                        dest='output_dir',
                        required=False,
                        type=str,
                        default='output',
                        help='Output directory (%(default)s)',)

    parser.add_argument('--designator-base', '-D',
                        metavar='DESIGNATOR',
                        action='store',
                        dest='designator',
                        required=False,
                        type=str,
                        help='Base designator to focus snarfing (%(default)s)',)

    parser.add_argument('--store-tles', '-s',
                        action='store_true',
                        dest='store_tles',
                        help='Store the full TLE information (%(default)s)',)

    parser.add_argument('--index', '-I',
                        action='store_true',
                        dest='index',
                        help='Build the indexes rather than snarf',)

    parser.add_argument('--log-file', '-l',
                        metavar='LOG_FILE',
                        action='store',
                        dest='log_file',
                        type=str,
                        default='%(output_dir)s/snarf-%(fname)s.log',
                        help='Logfile in output directory (%(default)s)')

    parser.add_argument('--log-level', '-L',
                        metavar='LOG_LEVEL',
                        action='store',
                        dest='log_level',
                        type=str,
                        default='info',
                        choices=['critical',
                                 'error',
                                 'warning',
                                 'info',
                                 'debug'],
                        help='Log level to use (%(default)s)')

    parser.add_argument('tle_path',
                        metavar='TLE_PATH',
                        action='store',
                        type=str,
                        help='File to snarf in')

    args = parser.parse_args()


    arg_dict = {
        'fname': os.path.basename(args.tle_path),
        }

    # Get our output directory all set up
    output_dir = args.output_dir % arg_dict
    arg_dict['output_dir'] = output_dir
    gabby.mkdir_p(output_dir)

    # Get set up to log
    log_file = args.log_file%arg_dict
    gabby.setup_logging(log_file=log_file,
                        log_level=args.log_level)
    logging.info(f"Giddy up, Gabby!")

    # Go find the undertaker
    db_path = args.db_path % arg_dict
    under = gabby.Undertaker(db_path=db_path)
    logging.info("The Undertaker is In")
    if args.index:
        under.index_db()

    elif args.tle_path:
        under.load_tlefile(args.tle_path,
                           base_des=args.designator,
                           store_tles=args.store_tles,
                           force=args.force)
